
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Programming on Kim Arpiainen</title>
   <link>https://kimisc.github.io/categories/programming/</link>
   <description>Recent content in Programming on Kim Arpiainen</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <managingEditor>kimarp15@gmail.com (Kim Arpiainen)</managingEditor>
   <webMaster>kimarp15@gmail.com (Kim Arpiainen)</webMaster>
   <lastBuildDate>Wed, 30 Dec 2020 08:46:30 +0200</lastBuildDate>
   
       <atom:link href="https://kimisc.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Development environment in a container with Remote Containers</title>
       <link>https://kimisc.github.io/posts/dev-containers-with-docker/</link>
       <pubDate>Wed, 30 Dec 2020 08:46:30 +0200</pubDate>
       <author>kimarp15@gmail.com (Kim Arpiainen)</author>
       <guid>https://kimisc.github.io/posts/dev-containers-with-docker/</guid>
       <description>&lt;p&gt;Multiple projects with different development environments are painful. Or the same project developed on two separate machines. Install this and that to get it running. Now the project starts but something is still off. Fix that. Now help your team to get it running too. If you are smart you document your steps. After a while a new developer joins your team, or maybe your own computer breaks down. You have to use precious time to get yet-another-development-environment up and running. Maybe there are things that you forgot to document.&lt;/p&gt;
&lt;p&gt;What if we could share our development environment with the other team members to reduce the &amp;ldquo;works on my machine&amp;rdquo; -effect and also cut costs by saving time on onboarding and maintenance?&lt;/p&gt;
&lt;h3 id=&#34;short-introduction-to-containers&#34;&gt;Short introduction to containers&lt;/h3&gt;
&lt;p&gt;Containers allow developers to package the application, its dependencies and configuration into a container image. It isolates the application from others on a shared operating system. The containers run on top of a container host (for example Docker) and the host runs on the OS. As the OS is shared by the containers, they have significantly smaller footprint compared to traditional virtual machines. &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/architecture/microservices/container-docker-introduction/&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;development-containers-to-the-rescue&#34;&gt;Development containers to the rescue&lt;/h3&gt;
&lt;p&gt;Development environment can be shared with a virtual machine, and sometimes it is the better option. However, as the virtual machine image requires to package and run the entire operating system, it is burdensome to share with others and the performance is lower. The resources for the VM are reserved on startup instead of using only what is needed. It is also quite likely that developers will start to have &amp;ldquo;snowflake&amp;rdquo; boxes that have different packages and package versions.&lt;/p&gt;
&lt;p&gt;To have a bit more dependencies than this blog site which is used later as an example, lets pick a &amp;ldquo;default&amp;rdquo; Angular project to make our case. The development environment should have NodeJS, Angular CLI and Chrome (for Karma tests) installed. Creating a virtual machine just for sharing that environment is overkill. There is way too much packaged into it, not to mention the resources wasted to run virtualized OS on top of your host OS just to be able to run NodeJS, AngularCLI and Chrome. So using a container seems to be a better alternative.&lt;/p&gt;
&lt;p&gt;Development containers can be a bit different than the small containers used in production. When the container image is only used for development purposes, there is no need to keep them as tiny as possible. You can install whatever tools you need as its only for development. For the image base you can start with the &amp;ldquo;regular&amp;rdquo; ones instead of Alpine or slim versions. You also rarely need to rebuild the image, only when the tools change. When you need to install a tool for development you can either install it directly inside the container (maybe you only need it for the current thing you are working on) or include it in the Dockerfile for the whole team to enjoy. (There is also &lt;code&gt;postCreateCommand&lt;/code&gt;-setting in the &lt;code&gt;devcontainer.json&lt;/code&gt; for e.g. installing packages).&lt;/p&gt;
&lt;p&gt;Sharing with the team is easy, you keep the Dockerfile versioned in the git repository and each developer builds their own image based on it. You don&amp;rsquo;t have to commit and set up Docker registeries at this point. To keep the packages unified across environments, its a good idea to pin specific package and image versions you are using instead of :latest or :lts.&lt;/p&gt;
&lt;p&gt;Due to the isolated nature of the containers and images, you can remove them after they are no longer needed and all the project specific dependencies are gone. Working with multiple projects becomes easier as all the packages and versions are isolated in own environments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Okay cool, nothing new here. I already know what containers have to offer. The problem is that me and/or my team have limited knowledge about Docker. We cannot start using them without investing a lot of time and effort on competence development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enter VSCode with &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Remote - Containers plugin&lt;/a&gt;. It allows for a pleasant development experience with minimal Docker knowledge. You can use Microsofts provided samples as a base image or your own Dockerfile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Personal blog&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dockerfile&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dockerfile&amp;#34;&lt;/span&gt;,
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;forwardPorts&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1313&lt;/span&gt;
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mounts&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source=${localWorkspaceFolder},target=/src,type=bind,consistency=cached&amp;#34;&lt;/span&gt;
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;extensions&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vscodevim.vim&amp;#34;&lt;/span&gt;,
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;containerUser&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hugo&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the &lt;code&gt;devcontainer.json&lt;/code&gt; file I use for this blog. With a couple of lines of configuration, I can start a VSCode instance inside the container, forwarding the ports and automatically installing the extensions I want. I can also share this with others along with the dockerfile to share the environments.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Development Dockerfile for this blog&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; klakegg/hugo:0.78.2-ext-debian&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /src&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create group hugo and user to said group named hugo. &lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -m switch creates home directory /home/hugo which is needed for devcontainer&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; groupadd -r hugo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; useradd -m -g hugo hugo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt; ]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;Both the Dockerfile and the devcontainer.json file are stored in &lt;code&gt;.devcontainer&lt;/code&gt; folder which is the convention.
&lt;figure&gt;
    &lt;img src=&#34;https://kimisc.github.io/img/devcontainers/devcontainer_options.jpg&#34;
         alt=&#34;Available options inside the container&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Available options inside the container&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;&amp;gt;Remote containers&lt;/code&gt; to the command palette shows the available options. To start VSCode inside the devcontainer, make sure you have the prequisites in check and start by selecting &lt;code&gt;Remote-Containers: Rebuild and Reopen in Container&lt;/code&gt; from the command menu. When you are running VSCode inside the container, you can rebuild the container to apply changes to your Dockerfile / devcontainer configuration. If you want to exit the container and return to &amp;ldquo;normal&amp;rdquo;, select &lt;code&gt;Remote-Containers: Reopen Locally&lt;/code&gt; as shown in the picture.&lt;/p&gt;
&lt;p&gt;After that massive introduction that is pretty much it. If the setup is done correctly you are running VSCode inside the container. (To be precise, VSCode is still ran on the host and it communicates with VSCode server inside the container). VSCode handles the starting automatically and most of the time you don&amp;rsquo;t even notice anything different. Except now you have isolated, documented and shareable development environment. &lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers-advanced#_developing-inside-a-container-on-a-remote-docker-host&#34;&gt;It is also possible to connect to a container in a remote host!&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://kimisc.github.io/img/devcontainers/devcontainer_indicator.jpg&#34;
         alt=&#34;When VSCode is running inside the container, the indicator is shown on the bottom left.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;When VSCode is running inside the container, the indicator is shown on the bottom left.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h4&gt;
&lt;p&gt;Docker and containers are nothing new under the sun and development environments as well as production environments have been packaged into containers for a while now. The real value is in the VSCode integration. Working inside a development container seems to &amp;ldquo;just work&amp;rdquo;. You can start reaping the benefits of isolated and unified development containers without spending a lot of time on learning the specific Docker workflows and commands.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers-tutorial&#34;&gt;&amp;ldquo;Remote containers tutorial&amp;rdquo;&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers-advanced&#34;&gt;&amp;ldquo;Advanced containers&amp;rdquo;&lt;/a&gt; for more information.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Simplifying Test Setup with Fluent Builder</title>
       <link>https://kimisc.github.io/posts/simplify-test-setup-fluent-builder/</link>
       <pubDate>Thu, 23 Jan 2020 08:46:30 +0200</pubDate>
       <author>kimarp15@gmail.com (Kim Arpiainen)</author>
       <guid>https://kimisc.github.io/posts/simplify-test-setup-fluent-builder/</guid>
       <description>&lt;p&gt;One of the many difficult things in software development is unit testing. Tests should be simple enough so that it&amp;rsquo;s easy to see and verify what is being tested. They should also be adaptive enough not to become too big of a burden to maintain alongside the production code. Not to mention actually testing something meaningful. This post focuses on the first phase of unit testing, the Arrange-phase. In case you are not familiar with AAA (&amp;ldquo;Arrange, Act, Assert&amp;rdquo; pattern), &lt;a href=&#34;http://wiki.c2.com/?ArrangeActAssert&#34;&gt;you can read more here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One way to setup test objects is to use setters or object initializer syntax to populate the values in each test. Lets say that we have 10 tests for the customer written in the following way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Fact]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Customer_WithValidData_ThenSomething() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; customer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer();
    customer.Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jon&amp;#34;&lt;/span&gt;;
    customer.Age = &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;;
    customer.Email = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;something@something.com&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// rest of the test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is quite basic setup phase. We can assume that Name, Age and Email are all required properties for a valid customer. It makes sense to refactor the &lt;code&gt;Customer&lt;/code&gt; class constructor to have those three parameters so that its impossible to create customer without these values.&lt;/p&gt;
&lt;p&gt;After the constructor change, there are 10 compile errors in our &lt;code&gt;Customer&lt;/code&gt; tests. At the same time the setters could be made private, so that raises the compilation error count even more. To fix this problem in our tests, we can extract a method for &lt;code&gt;CreateValidCustomer&lt;/code&gt; and use that for object creation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Customer CreateValidCustomer() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jon&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;something@something.com&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I guess that in most cases the pitfall from first example is avoided and some sort of &lt;code&gt;CreateTestData&lt;/code&gt; method is in place from the beginning. It&amp;rsquo;s a lot better option as we control the object creation in a single place. That means that if the class API changes, we only need to update one place to reflect those changes. This way we can avoid breaking the tests in multiple places.&lt;/p&gt;
&lt;p&gt;However, for thorough testing you will need different variations of objects. For that you probably have a class that contains a few methods for creating test objects. Examples could be &lt;code&gt;CreateValidCustomer&lt;/code&gt; and &lt;code&gt;CreateInvalidCustomer&lt;/code&gt;. This is usually referred as the &lt;a href=&#34;https://martinfowler.com/bliki/ObjectMother.html&#34;&gt;&amp;ldquo;Object Mother&amp;rdquo;&lt;/a&gt;. The drawback of the Object Mother is that it&amp;rsquo;s hard to handle the different permutations required for our tests.&lt;/p&gt;
&lt;p&gt;This is where the Fluent Builder can help. You can easily define the target state for the object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This is test specific code which lies in the test project
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// not referenced nor part of production code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomerBuilder&lt;/span&gt; {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; _name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jon&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// you can have defaults here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _age;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; _email;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CustomerBuilder() {
        &lt;span style=&#34;color:#75715e&#34;&gt;// or if you prefer to explicitly set the defaults in the constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        _age = &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;;
        _email = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;something@something.com&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CustomerBuilder WithName(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name) {
        _name = name;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CustomerBuilder WithAge(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age) {
        _age = age;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Customer Build() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer(_name, _age, _email);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the Fluent Builder setup we can now easily create different types of customers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; customerWithInvalidName = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CustomerBuilder()
        .WithName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
        .Build();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; tooYoungCustomerWithValidName = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CustomerBuilder()
        .WithName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jon&amp;#34;&lt;/span&gt;)
        .WithAge(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        .Build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have a way for creating different variations from the &lt;code&gt;Customer&lt;/code&gt; class for our testing needs. The builder will also make the object creation clear and declarative. In most cases we still need the default valid customer. For that you can define some sensible default values and call &lt;code&gt;new CustomerBuilder().Build()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One could argue that tests with unique test data needs are better to write inline within the test using constructor, and the common cases are covered with the Object Mother. That leads us straight back to the first example. If we would add e.g. &lt;code&gt;Address&lt;/code&gt; property, we could hopefully fix the old tests with a default value, thus no changes are required in the client code.&lt;/p&gt;
&lt;p&gt;In case you have multiple tests where you need the same configuration for a customer, e.g. &lt;code&gt;GenericInvalidCustomer&lt;/code&gt;, you can combine the creation method and Fluent Builder pattern by adding the method in the builder class. For really complex object graphs you could even combine other classes builders/object mothers to build up the customer. E.g. &lt;code&gt;customer.Address = AddressMother.ValidAddress()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The Fluent Builder is a great pattern for unit testing. Even though it might seem like too much hassle, it is quick and easy to implement. When you need to change a property, just add a few lines of boilerplate code. That being said, I definitely do not recommend writing a Fluent Builder for every class in the system. I would start with a basic creation method and adjust as necessary. Whatever is the easiest to maintain.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Avoid Logic in Setters</title>
       <link>https://kimisc.github.io/posts/avoid-logic-in-setters/</link>
       <pubDate>Thu, 10 Oct 2019 08:46:30 +0200</pubDate>
       <author>kimarp15@gmail.com (Kim Arpiainen)</author>
       <guid>https://kimisc.github.io/posts/avoid-logic-in-setters/</guid>
       <description>&lt;p&gt;Its quite common in business to have requirements that when A happens, B needs to happen too. In the following imaginary example, the requirement is to increment the car owner count each time the owner changes. One way to implement it is to increment the counter in the setter. That way the developers don&amp;rsquo;t have to remember to increment the counter each time owner is changed, updating the property is enough. In a bigger project this could be a domain event e.g. &lt;code&gt;CarOwnerChangedEvent&lt;/code&gt; and the handler would take care of this. To keep things simple, we just increment the counter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Owner _owner;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; OwnerCount {&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;;}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Owner Owner {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _owner;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; {
            OwnerCount++;
            _owner = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CarSoldToNewOwner(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; carId, Owner newOwner)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; car = GetCarById(carId);
        car.Owner = newOwner;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Car GetCarById(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _context.Cars
            .Include(x =&amp;gt; x.Owner)
            .FirstOrDefault(x =&amp;gt; x.Id == id);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemoContext&lt;/span&gt; : DbContext
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DemoContext(DbContextOptions&amp;lt;DemoContext&amp;gt; options) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(options){ }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbSet&amp;lt;Car&amp;gt; Cars { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbSet&amp;lt;Owner&amp;gt; Owners { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And of course we&amp;rsquo;ve included a test case to prove that it works correctly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Fact]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Car_OnOwnerChange_IncrementsOwnerCount()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; car = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Car();
    car.Owner = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Owner(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;owner&amp;#34;&lt;/span&gt;);
    Assert.Equal(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, car.OwnerCount);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;updating-the-car-object&#34;&gt;Updating the Car object&lt;/h2&gt;
&lt;p&gt;Entity Framework (EF) Core is used in the example to handle persistence for us. Now the day comes that an old car that was already in the system is sold to a new owner. &lt;code&gt;CarSoldToNewOwner&lt;/code&gt; is called and car data is fetched from the database, EF creates a &lt;code&gt;Car&lt;/code&gt; object for us and we change the owner. The &lt;code&gt;GetCarById&lt;/code&gt; is a simple read-only query, it gets the car with the correct Id and loads the Owner data along with it.&lt;/p&gt;
&lt;p&gt;The problems arise when the saved entity is fetched from the database by our ORM. Entity framework needs to fetch the data from the database and construct objects for us to handle. The problem with setters is that ORMs &lt;strong&gt;can&lt;/strong&gt; use them when creating objects. Due to wrongly configured backing field in the &lt;code&gt;Car&lt;/code&gt; class (wrong being no configuration at all), EF will call the Owner setter in the &lt;code&gt;Car&lt;/code&gt; class when retrieving the object in &lt;code&gt;GetCarById&lt;/code&gt;. Thus the &lt;code&gt;CarSoldToNewOwner&lt;/code&gt; will increment the owner counter by two instead of one, once after the read and second time by our business logic. This is definitely not obvious behavior from reading the code and thus a hard bug to track. &lt;code&gt;GetCarById&lt;/code&gt; is just a simple read-only query. Although the convention for a backing field is followed, navigation properties require &lt;strong&gt;additional&lt;/strong&gt; configuration.&lt;/p&gt;
&lt;h2 id=&#34;fixing-the-issue&#34;&gt;Fixing the issue&lt;/h2&gt;
&lt;p&gt;Personally I would fix this issue by moving the logic away from the setter, maybe even having the setter as private and have a &lt;code&gt;ChangeOwner(newOwner)&lt;/code&gt; method in the &lt;code&gt;Car&lt;/code&gt; class that increments the counter. The API becomes more clear and I&amp;rsquo;m expecting additional processing as I&amp;rsquo;m calling a method instead of a property setter. Also if we would like to include some validation to the owner change, like a null check, it would not make much sense if the setter throws an &lt;code&gt;ArgumentNullException&lt;/code&gt;. In my opinion a separate method follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&#34;&gt;Principle of least astonishment&lt;/a&gt; better than the property setter.&lt;/p&gt;
&lt;p&gt;There are definitely cases where having the increment in the setter is the best option. Could be for example a legacy system with dozens of references to &lt;code&gt;car.Owner = newOwner&lt;/code&gt; and we need to get the business requirement filled. Or bunch of other reasons. To get the example working as expected in EF core, following configuration is required.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnModelCreating(ModelBuilder modelBuilder)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; navigation = modelBuilder.Entity&amp;lt;Car&amp;gt;()
        .Metadata.FindNavigation(nameof(Car.Owner));

    navigation.SetPropertyAccessMode(PropertyAccessMode.Field);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this configuration, EFs object creation does not touch the setter anymore and the owner count is incremented only in our code. It uses the provided backing field &lt;code&gt;_owner&lt;/code&gt; instead of the &lt;code&gt;Owner&lt;/code&gt; property.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Although I only tested this behavior on EF core, my &lt;em&gt;guess&lt;/em&gt; is that the problem with setters applies to other ORMs as well, one way or another. Personally I prefer the first fix, where the logic is encapsulated to a method. It is more clear for the API consumer, does not require any additional configuration for the entities and the team does not have to worry about the weird cases where the problem surfaces.&lt;/p&gt;
&lt;p&gt;If you need to take the second route with the additional configuration, double check that you have integration tests that include EF in the mix. You can find one &lt;a href=&#34;https://github.com/kimisc/SetterDemo/blob/ebc0c015131962bbff17ce92f13a5f72713d1736/SetterDemoTests/CarTests.cs#L19&#34;&gt;example here&lt;/a&gt;. Obviously its always good to have the integration tests, even when going with the recommended solution.&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
